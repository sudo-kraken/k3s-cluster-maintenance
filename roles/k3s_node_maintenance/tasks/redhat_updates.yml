---
# RedHat/CentOS package updates
- name: Parse package list
  ansible.builtin.set_fact:
    k3s_node_maintenance_dnf_packages_to_upgrade: >-
      {{ k3s_node_maintenance_dnf_updates_available.results | map(attribute='name') | list }}
  when: k3s_node_maintenance_dnf_updates_available.results | length > 0
  tags: [packages, updates, redhat, parse]

- name: "Upgrading packages: {{ k3s_node_maintenance_dnf_packages_to_upgrade | length }}"
  become: true
  ansible.builtin.dnf:
    name: "*"
    state: present
    update_only: true
    update_cache: true
  register: k3s_node_maintenance_dnf_upgrade_result
  when:
    - k3s_node_maintenance_dnf_packages_to_upgrade is defined
    - k3s_node_maintenance_dnf_packages_to_upgrade | length > 0
  tags: [packages, updates, redhat, upgrade]

- name: Check reboot requirement
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    if command -v needs-restarting >/dev/null 2>&1; then
        needs-restarting -r >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "No"
        else
            echo "Yes"
        fi
    else
        if [ "{{ k3s_node_maintenance_dnf_upgrade_result.changed | default(false) }}" = "True" ]; then
            echo "{{ k3s_node_maintenance_dnf_packages_to_upgrade | default([]) | join(' ') }}" | \
              grep -q -E "(kernel|systemd|linux-firmware|glibc)" && echo "Yes" || echo "No"
        else
            echo "No"
        fi
    fi
  register: k3s_node_maintenance_dnf_reboot_required
  changed_when: false
  check_mode: false
  when: ansible_facts['os_family'] == 'RedHat'
  tags: [packages, updates, redhat, reboot_check]
