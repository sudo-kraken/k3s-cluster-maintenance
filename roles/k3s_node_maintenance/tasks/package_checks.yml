---
# Check for available package updates and determine if maintenance is needed
- name: Check for available package updates (apt)
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    apt list --upgradable 2>/dev/null | tail -n +2 | wc -l
  register: k3s_node_maintenance_apt_updates_available
  when: ansible_facts['os_family'] == 'Debian'
  changed_when: false
  tags: [packages, check_updates, debian]

- name: Check for available package updates (dnf)
  become: true
  ansible.builtin.dnf:
    list: updates
  register: k3s_node_maintenance_dnf_updates_available
  when: ansible_facts['os_family'] == 'RedHat'
  tags: [packages, check_updates, redhat]

- name: Determine if maintenance is needed
  ansible.builtin.set_fact:
    k3s_node_maintenance_packages_need_update: >-
      {{
        (ansible_facts['os_family'] == 'Debian' and (k3s_node_maintenance_apt_updates_available.stdout | int) > 0) or
        (ansible_facts['os_family'] == 'RedHat' and (k3s_node_maintenance_dnf_updates_available.results | length) > 0)
      }}
    k3s_node_maintenance_update_count: >-
      {{
        (k3s_node_maintenance_apt_updates_available.stdout | int) if ansible_facts['os_family'] == 'Debian'
        else (k3s_node_maintenance_dnf_updates_available.results | length)
      }}
  tags: [packages, check_updates]

- name: Package update status
  ansible.builtin.debug:
    msg: |
      {% if k3s_node_maintenance_packages_need_update -%}
      ğŸ“¦ {{ k3s_node_maintenance_update_count }} package updates available - proceeding with maintenance
      {% else -%}
      âœ… No updates available - skipping maintenance
      {% endif %}
  tags: [packages, check_updates]

- name: End play if no updates needed
  ansible.builtin.meta: end_play
  when: not k3s_node_maintenance_packages_need_update
  tags: [packages, check_updates]
