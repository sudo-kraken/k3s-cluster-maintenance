---
# Resume maintenance after manual reboot or reboot failure
# This bypasses the reboot_required check and goes straight to restoration

- name: Check current node status
  delegate_to: localhost
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    name: "{{ inventory_hostname }}"
  register: k3s_node_maintenance_node_status_info
  tags: [resume, status]

- name: Set node ready status fact
  ansible.builtin.set_fact:
    k3s_node_maintenance_node_is_ready: |
      {%- set ready = false -%}
      {%- if k3s_node_maintenance_node_status_info.resources[0].status.conditions is defined -%}
        {%- for condition in k3s_node_maintenance_node_status_info.resources[0].status.conditions -%}
          {%- if condition.type == "Ready" and condition.status == "True" -%}
            {%- set ready = true -%}
          {%- endif -%}
        {%- endfor -%}
      {%- endif -%}
      {{ ready }}
  tags: [resume, status]

- name: Wait for node to become Ready (if not already)
  delegate_to: localhost
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    name: "{{ inventory_hostname }}"
    wait: true
    wait_condition:
      type: Ready
      status: "True"
    wait_timeout: 300
  when: not k3s_node_maintenance_node_is_ready
  tags: [resume, wait_ready]

- name: Include cluster restoration
  ansible.builtin.include_tasks: cluster_restoration.yml
  tags: [resume, restore]
