---
# Cluster preparation tasks - Longhorn, cordoning, and draining
- name: Check for Longhorn on this node
  delegate_to: localhost
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    field_selectors:
      - spec.nodeName={{ inventory_hostname }}
    namespace: longhorn-system
  register: longhorn_pods_info
  tags: [cluster, prepare, longhorn]

- name: Disable Longhorn scheduling (if present)
  delegate_to: localhost
  block:
    - name: Check Longhorn Node CR
      kubernetes.core.k8s_info:
        api_version: longhorn.io/v1beta2
        kind: Node
        name: "{{ inventory_hostname }}"
        namespace: longhorn-system
      register: longhorn_node_check

    - name: Disable scheduling
      kubernetes.core.k8s:
        api_version: longhorn.io/v1beta2
        kind: Node
        name: "{{ inventory_hostname }}"
        namespace: longhorn-system
        state: present
        merge_type: merge
        definition:
          spec:
            allowScheduling: false
      when: longhorn_node_check.resources | length > 0

    - name: Wait for Longhorn to disable scheduling
      pause:
        seconds: 15
      when: longhorn_node_check.resources | length > 0

  when: (longhorn_pods_info.resources | length) > 0
  tags: [cluster, prepare, longhorn]

- name: Prepare node for maintenance
  delegate_to: localhost
  block:
    - name: Cordon node
      kubernetes.core.k8s:
        api_version: v1
        kind: Node
        name: "{{ inventory_hostname }}"
        state: present
        merge_type: strategic-merge
        definition:
          spec:
            unschedulable: true

    - name: Get pods to drain
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        field_selectors:
          - spec.nodeName={{ inventory_hostname }}
      register: node_pods

    - name: Filter drainable pods
      set_fact:
        pods_to_drain: |
          {%- set filtered_pods = [] -%}
          {%- for pod in node_pods.resources -%}
            {%- set is_daemonset = false -%}
            {%- if pod.metadata.ownerReferences is defined -%}
              {%- for owner in pod.metadata.ownerReferences -%}
                {%- if owner.kind == "DaemonSet" -%}
                  {%- set is_daemonset = true -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endif -%}
            {%- if not is_daemonset and pod.metadata.namespace != "kube-system" -%}
              {%- set _ = filtered_pods.append(pod) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ filtered_pods }}

    - name: Node drain status
      debug:
        msg: "ðŸ”„ Draining {{ pods_to_drain | length }} pods from {{ inventory_hostname }}"
      when: pods_to_drain | length > 0

    - name: Drain pods from node
      kubernetes.core.k8s:
        api_version: v1
        kind: Pod
        name: "{{ item.metadata.name }}"
        namespace: "{{ item.metadata.namespace }}"
        state: absent
        wait: true
        wait_timeout: 60
        delete_options:
          gracePeriodSeconds: 30
      loop: "{{ pods_to_drain }}"
      loop_control:
        label: "{{ item.metadata.namespace }}/{{ item.metadata.name }}"
      register: drain_result
      failed_when: false

    - name: Drain completed
      debug:
        msg: "âœ… Node drain completed - ready for maintenance"
  tags: [cluster, prepare, drain]
